# Calculates the gas cost diff for each smart contract operation

# NOTE: Since its so hard to get the total, real cosmos SDK gas cost from cosm_vm::mock_instance_with_gas_limit()
# Im going to just write a script here that will call these contracts in a local chain running in the github action (if thats too much work I can transition it to using the testnet or something)

on: [pull_request]

name: Gas Costs Diff

jobs:
  compile-contracts:
    name: Compile contracts using optimized rust compiler
    runs-on: ubuntu-latest
    container:
      image: cosmwasm/rust-optimizer:0.12.5
      options:
        --platform linux/amd64
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Compile contracts
        run: /usr/local/bin/optimize.sh .
      - name: Store contracts in cache
        id: contracts-cache
        uses: actions/cache@v1
        with:
          path: artifacts
          key: artifacts-contracts

  compile-old-contracts:
    name: Compile old contracts using optimized rust compiler
    runs-on: ubuntu-latest
    container:
      image: cosmwasm/rust-optimizer:0.12.5
      options:
        --platform linux/amd64
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.base.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: Compile contracts
        run: /usr/local/bin/optimize.sh .
      - name: Store contracts in cache
        id: old-contracts-cache
        uses: actions/cache@v1
        with:
          path: artifacts
          key: artifacts-old-contracts

  calc-gas-costs:
    name: Calculate gas costs in local juno-net
    runs-on: ubuntu-latest
    needs: [compile-contracts, compile-old-contracts]
    container:
      image:  ghcr.io/cosmoscontracts/juno:v2.3.0-beta.1
      env:
        PASSWORD: xxxxxxxxx
        STAKE_TOKEN: ujunox
        GAS_LIMIT: -1
        UNSAFE_CORS: true
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Restore contracts from cache
        uses: actions/cache@v1
        with:
          path: artifacts
          key: artifacts-contracts
      - name: Restore old contracts from cache
        uses: actions/cache@v1
        with:
          path: artifacts-old
          key: artifacts-old-contracts
      - name: Install deps
        run: apk --no-cache add curl jq
      - name: Setup Juno Node
        run: cd /opt && /opt/setup_and_run.sh juno10j9gpw9t4jsz47qgnkvl5n3zlm2fz72k67rxsg > /dev/null 2>&1 &
      - name: Calculate gas costs
        run: ./scripts/calc_gas.sh juno10j9gpw9t4jsz47qgnkvl5n3zlm2fz72k67rxsg
      - name: Debug gas_usage
        run: cat ./gas_usage/cw3_dao/instatiate.json
      - name: Post Diff to PR
        uses: actions/github-script@v6
        # TODO: Put script in a js file: https://github.com/actions/github-script#run-a-separate-file-with-an-async-function
        with:
          script: |
            const fs = require('fs');

            var gasUsage = {};
            fs.readdir("./gas_usage/", function (err, contract_dirs) {
              if (err) {
                console.error("Error reading gas_usage dir:", err);
                return
              }

              contract_dirs.forEach(function (contract_dir, index) {
                console.log("Processing: " + contract_dir);

                fs.readdir(`./gas_usage/${contract_dir}`, function (err, files) {
                  if (err) {
                    console.error("Error reading " + contract_dir, err);
                    return
                  }

                  files.forEach(function (file, index) {
                    console.log("Loading: " + files);
                    fs.readFile(file, 'utf8' , (err, data) => {
                      if (err) {
                        console.error(err)
                        return
                      }
                      console.log(data)
                      gasUsage[contract_dir][file] = data;
                    });
                  });
                });
              });
            });

            console.log(gasUsage);

            const commentHeader = `![gas](https://liquipedia.net/commons/images/thumb/7/7e/Scr-gas-t.png/20px-Scr-gas-t.png) ~ Gas Diff Report ~ ![gas](https://liquipedia.net/commons/images/thumb/7/7e/Scr-gas-t.png/20px-Scr-gas-t.png)`;
            var commentData = "";
            for (var contract in gasUsage) {
              commentData += `  * ${contract}:` + '\n';

              for (var f in gasUsage[contract]) {
                const mainUsage = gasUsage[contract][f]["main"];
                const prUsage = gasUsage[contract][f]["pr"];

                commentData += `    * ${f}:` + '\n';
                commentData += `      * Change:` + '\n';
                commentData += `      * main: ${{ github.event.pull_request.base.sha }}: ${mainUsage} ` + '\n';
                commentData += `      * PR: ${{ github.sha }}: ${prUsage}` + '\n\n';
              }
            }

            const commentBody = commentHeader + '\n' +  commentData;

            const {data: comments} = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const botComment = comments.find(comment => comment.user.id === 41898282);

            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            }

